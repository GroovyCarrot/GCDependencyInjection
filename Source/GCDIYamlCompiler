#!/usr/bin/env ruby
#
# GCDependencyInjection
#
# Created by Jake Wise on 13/05/2016.
# Copyright (c) 2016 GroovyCarrot Ltd. All rights reserved.
#
# You are permitted to use, modify, and distribute this file in accordance with
# the terms of the license agreement accompanying it.
#

require 'yaml'
require 'optparse'

class ContainerYamlCompiler
  @@output
  @@definitionParser
  @@parser

  def initialize(definitionParser, parser)
    @definitionParser = definitionParser
    @parser = parser
  end

  def compile(klass, instruction)
    implementation = []

    if instruction['Parameters'].is_a?(Hash)
      instruction['Parameters'].each do |parameter, value|
        implementation.push(@parser.setParameter(parameter, value))
      end
    end

    if instruction['Services'].is_a?(Hash)

      instruction['Services'].each do |service, definition|
        if definition.is_a?(String)
          if definition[0, 1] == '@'
            implementation.push(@parser.setAlias(service, definition))
          end
        else
          implementation.push(@parser.setService(service, @definitionParser.parseServiceDefinition(definition, @parser)))
        end
      end
    end

    @output.puts @parser.writeImplementation(klass, implementation.join("\n"))
  end

  def setOutput(output)
    @output = output
    @output.puts @parser.startFile()
  end

  def getOutput()
    return @output
  end
end

class ContainerDefinitionParser
  @@lines
  @@parser

  def parseServiceDefinition(definition, parser)
    @lines = []
    @parser = parser

    if definition['Class']
      @lines.push(@parser.setProperty('definition', 'klass', definition['Class']))
    end

    if definition['Factory']
      @lines.push(@parser.setProperty('definition', 'factory', definition['Factory']))
    end

    if definition['Initializer']
      if (!definition['Initializer'].is_a?(String))
        raise "Initializer must be a string defining the init, or factory method to call."
      end
      @lines.push(@parser.setProperty('definition', 'initializer', @parser.wrapSelector(definition['Initializer']), true))
    elsif definition['Factory']
      raise 'A selector must be specified when using a factory service.'
    end

    if definition['Arguments']
      if (!definition['Arguments'].is_a?(Array))
        raise "Arguments must be an array, and have only the required number as defined by the initializer."
      end
      @lines.push(@parser.setProperty('definition', 'arguments', definition['Arguments']))
    end

    if definition['Setters']
      if (!definition['Setters'].is_a?(Hash))
        raise "Setters must be keyed: 'setProperty:': 'value'."
      end
      @lines.push(@parser.setProperty('definition', 'setters', definition['Setters']))
    end

    if definition['MethodCalls']
      definition['MethodCalls'].each do |methodCall|
        if methodCall.is_a?(Hash)
          @lines.push(@parser.callSetterMethod('definition', 'addMethodCall', @parser.createMethodCall(methodCall['Selector'], methodCall['Arguments']), true))
        else
          @lines.push(@parser.callSetterMethod('definition', 'addMethodCall', @parser.createMethodCall(methodCall[0], methodCall[1]), true))
        end
      end
    end

    if definition['Tags']
      @lines.push(@parser.setProperty('definition', 'tags', definition['Tags']))
    end

    if definition['Shared']
      @lines.push(@parser.setProperty('definition', 'shared', definition['Shared']))
    end

    if definition['Synthetic']
      @lines.push(@parser.setProperty('definition', 'synthetic', definition['Synthetic']))
    end

    return @parser.createDefinitionBlockFromImplementation(@lines.join("\n"))
  end
end

class CodeTranslator
  @@language

  def setLanguage(language = 'objc')
    @language = language
  end

  def getLanguage()
    return @language
  end

  def getExtension()
    case @language
    when 'swift'
      return '.swift'
    else
      return '.m'
    end
  end

  def parse(value, convertToObjects = false)
    if value.is_a?(Array)
      resolved = []
      value.each do |val|
        resolved.push(self.parse(val, true))
      end
      return self.wrapArray(resolved)
    elsif value.is_a?(Hash)
      resolved = []
      value.each do |key, val|
        resolved.push(self.parse(key, true) + ': ' + self.parse(val, true))
      end
      return self.wrapDictionary(resolved)
    elsif value.is_a?(Numeric)
      return self.wrapNumber(value, convertToObjects)
    elsif [true, false].include?(value)
      return wrapBool(value, convertToObjects)
    elsif value.is_a?(String) && value[0, 1] == '@'
      service = nil
      invalidBehaviour = nil

      if value[0, 2] == '@@'
        return self.wrapString(value[1, value.length - 1])
      elsif value[0, 2] == '@?'
        service = value[2, value.length - 2]
        invalidBehaviour = 'kNilOnInvalidReference'
      else
        service = value[1, value.length - 1]
        invalidBehaviour = 'kExceptionOnInvalidReference'
      end

      return self.createServiceReference(service, invalidBehaviour)
    end
    return self.wrapString(value)
  end

  def setParameter(parameter, value)
    case @language
    when 'swift'
      return 'self.setParameter(' + self.parse(parameter) + ', value:' + self.parse(value) + ')'
    else
      return '[self setParameter:' + self.parse(parameter) + ' value:' + self.parse(value) + '];'
    end
  end

  def setAlias(service, definition)
    case @language
    when 'swift'
      return 'self.setAlias(' + self.parse(service) + ', to:' + self.parse(definition[1, definition.length - 1]) + ')'
    else
      return '[self setAlias:' + self.parse(service) + ' to:' + self.parse(definition[1, definition.length - 1]) + '];'
    end
  end

  def setService(service, implementation)
    case @language
    when 'swift'
      return 'self.setService(' + self.parse(service) + ') ' + implementation
    else
      return '[self setService:' + self.parse(service) + " definition:" + implementation + "];"
    end
  end

  def setProperty(variable, property, value, parsed = false)
    case @language
    when 'swift'
      return variable + '.' + property + ' = ' + (parsed ? value : self.parse(value))
    else
      return variable + '.' + property + ' = ' + (parsed ? value : self.parse(value)) + ';'
    end
  end

  def callSetterMethod(variable, method, argument, parsed = false)
    case @language
    when 'swift'
      return variable + '.' + method + '(' + (parsed ? argument : self.parse(argument)) + ')'
    else
      return '[' + variable + ' ' + method + ':' + (parsed ? argument : self.parse(argument)) + '];'
    end
  end

  def createMethodCall(selector, arguments)
    case @language
    when 'swift'
      return 'GCDIMethodCall(selector:' + self.wrapSelector(selector) + ', andArguments:' + self.parse(arguments) + ')'
    else
      return '[GCDIMethodCall methodCallForSelectorNamed:' + self.wrapSelector(selector) + ' andArguments:' + self.parse(arguments) + ']'
    end
  end

  def createServiceReference(service, invalidBehaviour)
    case @language
    when 'swift'
      return 'GCDIReference(forServiceId:' + self.parse(service) + ', invalidBehaviourType:' + invalidBehaviour + ')'
    else
      return '[GCDIReference referenceForServiceId:' + self.parse(service) + ' invalidBehaviourType:' + invalidBehaviour + ']'
    end
  end

  def wrapString(value)
    case @language
    when 'swift'
      return '"' + value + '"'
    else
      return '@"' + value + '"'
    end
  end

  def wrapArray(values)
    case @language
    when 'swift'
      return '[' + values.join(', ') + ']'
    else
      return '@[' + values.join(', ') + ']'
    end
  end

  def wrapDictionary(values)
    case @language
    when 'swift'
      return '[' + values.join(', ') + ']'
    else
      return '@{ ' + values.join(', ') + ' }'
    end
  end

  def wrapNumber(value, convertToObjects = false)
    case @language
    when 'swift'
      return "#{value}"
    else
      return convertToObjects ? "@#{value}" : "#{value}"
    end
  end

  def wrapBool(value, convertToObjects = false)
    case @language
    when 'swift'
      return value == true ? 'true' : 'false'
    else
      _YES = 'TRUE'
      _NO = 'FALSE'
      value = value == true ? _YES : _NO
      return convertToObjects ? '@' + value : value
    end
  end

  def wrapSelector(selector)
    return self.wrapString(selector)
  end

  def startFile()
    # Write file header.
    output = []
    case @language
    when 'swift'
      output.push('import Foundation')
      output.push('import GCDependencyInjection')
      output.push('')
    else
      output.push('#import <GCDependencyInjection/GCDependencyInjection.h>')
      output.push('')
    end
    return output
  end

  def writeImplementation(klass, implementation)
    output = []
    case @language
    when 'swift'
      output.push('extension ' + klass + ' {')
      output.push('  func yamlProvisionContainer() {')
      output.push(self.outputCodeWithIndentation(implementation, 4))
      output.push('  }')
      output.push('}')
    else
      output.push('@interface ' + klass + ' : GCDIDefinitionContainer')
      output.push('@end')
      output.push('@implementation ' + klass + ' (Yaml)')
      output.push('- (void)yamlProvisionContainer {')
      output.push(self.outputCodeWithIndentation(implementation, 2))
      output.push('}')
      output.push('@end')
    end
    return output
  end

  def createDefinitionBlockFromImplementation(implementation)
    case @language
    when 'swift'
      return "{ definition in\n" + self.outputCodeWithIndentation(implementation, 2) + "\n}"
    else
      return "^(GCDIDefinition *definition) {\n" + self.outputCodeWithIndentation(implementation, 2) + "\n}"
    end
  end

  def outputCodeWithIndentation(code, n)
    return (' ' * n) + code.split("\n").join("\n" + (' ' * n))
  end
end

options = {
  language: 'objc',
}

OptionParser.new do |opts|
  opts.banner = "Usage: GCDIYamlCompiler <file> [<file>...] [options]"

  opts.on("-o", "--output [file]", "Specify output file") do |o|
    options[:output] = File.expand_path(o)
    options[:outputIsDir] = File.directory?(o)
  end

  opts.on("-l", "--language (objc|swift)", "Specify a language") do |language|
    if (['objc', 'swift'].include?(language))
      options[:language] = language
    end
  end
end.parse!

code_writter = CodeTranslator.new()
code_writter.setLanguage(options[:language])
writer = ContainerYamlCompiler.new(ContainerDefinitionParser.new, code_writter)

if options[:output] && !options[:outputIsDir]
  writer.setOutput(File.open(options[:output], 'w+'))
end

ARGV.each do |file|
  file = File.expand_path(file)

  if !File.exists?(file)
    puts 'File not found: ' + file + '. Skipping.'
    next
  end

  # Assume the filename is the name of the class that the implementation is for.
  klass = File.basename(file, '.*')

  instruction = YAML.load_file(file)
  if (instruction['Language'] && ['objc', 'swift'].include?(instruction['Language'].downcase))
    code_writter.setLanguage(instruction['Language'].downcase)
  end

  if !instruction.is_a?(Hash)
    instruction = {}
  elsif instruction['ContainerClass'] && instruction['ContainerClass'].is_a?(String)
    # Allow the YAML file to define the class of the container implementation to
    # write to with ContainerClass key.
    klass = instruction['ContainerClass']
  end

  if !options[:output]
    # Write file to the source file directory.
    writer.setOutput(File.open(File.dirname(file) + '/' + File.basename(file, ".*") + code_writter.getExtension(), 'w+'))
  elsif options[:outputIsDir]
    # Write the file to the specified output directory.
    writer.setOutput(File.open(options[:output] + '/' + File.basename(file, ".*") + code_writter.getExtension(), 'w+'))
  else
    # Assume we're writing many implementations to the one file, add a space.
    writer.getOutput().puts ''
  end

  writer.compile(klass, instruction)

  puts 'Output ' + klass + ' (Yaml) implementation in ' + code_writter.getLanguage() + ' to ' + File.expand_path(writer.getOutput().path)
end
